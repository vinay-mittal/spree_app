c
@available_payment_methods
n
c
n
any_subscriptions?
c
n
Spree::PaymentMethod.active
c
line_items.where(variant_id: subscriptions.pluck(:variant_id))
c
line_items.where(variant_id: subscriptions.pluck(:variant_id))
c
line_items.where(variant_id: subscriptions.pluck(:variant_id))
c
line_items.where(variant_id: subscriptions.pluck(:variant_id))
c
line_items.where(variant_id: subscriptions.pluck(:variant_id))
c
subscribe
c
subscribe
c
subscribe
c
params[:options]
params[:options].merge! params[:subscription]
params[:subscription]
n
c
subscribe
c
current_order.line_items.where(id: nil)
current_order.line_items.first.subscription
current_order.line_items.first.save
current_order.line_items
current_order
c
line_item
@order
self
:back
c
@subscription.errors
@subscription.valid?
c
@subscription.errors
@subscription.valid?
c
cancelled_at
cancelled?
c
subscription
subscription.end_date = "22/03/2016"
subscription
subscription.end_date = "03/22/2016"
end_date
subscription.errors
subscription = Spree::Subscription.create subscription_attributes
n
exit
c
last_occurrence_at + frequency.months_count.month
c
last_occurrence_at + frequency.months_count.month
update_columns(last_occurrence_at: Time.current)
c
update_columns(last_occurrence_at: Time.current)
c
update_columns(last_occurrence_at: Time.current)
update(last_occurrence_at: Time.current)
last_occurrence_at
last_occurrence_at + frequency.months_count.month
c
last_occurrence_at + frequency.months_count.month
c
last_occurrence_at + frequency.months_count.month
frequency.months_count.month + last_occurrence_at
frequency.months_count.month + last_occurence_at
frequency.months_count.month
frequency.months_count
frequency
last_occurrence_at
c
new_order.payments.first.update(source: source)
new_order.payments.update(source: source)
c
new_order.payments.create(source: source)
new_order.payments.new(source: source).save
new_order.payments.delete_all
new_order.payments
c
new_order.payments.create(source: source)
new_order.payments
c
new_order.state
c
new_order.payments.first.payment_method
new_order.payments.count
new_order.payments
new_order.payment_methods
new_order.payment_method
new_order.next!
new_order.next
new_order.next_state
new_order.state
c
Spree::PaymentMethod.first
c
new_order.next
c
new_order.next
c
new_order.next
c
persist_totals
n
c
persist_totals
n
c
new_order.next
new_order.state
c
n
new_order.state
n
c
parent_order.shipping_methods
parent_order.shipping_method
parent_order.delivery?
parent_order.delivery
parent_order.shipments
c
new_order.payments.valid.sum(:amount).to_i
new_order.payments.valid.sum(:amount)
        debugger
new_order.next
new_order.total.to_i
new_order.total
new_order.next
new_order.state
c
new_order.state
c
SubscriptionNotifier.notify_user(self).deliver
c
SubscriptionNotifier.notify_user(self).deliver
c
SubscriptionNotifier.notify_user(self).deliver
c
SubscriptionNotifier.notify_user(self).deliver
c
SubscriptionNotifier.notify_user(self).deliver
c
SubscriptionNotifier.notify_user(self).deliver
c
SubscriptionNotifier.notify_user(self).deliver
c
SubscriptionNotifier.notify_user(self).deliver
SubscriptionNotifier.notify_user self
c
Spree::SubscriptionNotifier.notify_user self
SubscriptionNotifier.notify_user self
c
Spree::SubscriptionNotifier.notify_user self
SubscriptionNotifier.notify_user self
c
subscription
c
end_date
subscription.end_date
subscription.errors
subscription.save
Spree::Subscription.find_by(parent_order: order).destroy
Spree::Subscription.find_by(parent_order: order)
subscription.errors
subscription.save
subscription
c
subscription_frequency_id
end_date
c
opts
c
n
c
ActionController::Parameters.new(options)
PermittedAttributes.line_item_attributes
opts
c
params[:options]
params[:options].merge! params[:subscription]
params[:options] ||= {}
params
parmas
params[:options]
params.fetch(:options, {}).merge! params[:subscription]
c
subscription_frequency_id
subscription
c
subscription_frequency_id
c
params[:options]
params[:options].merge! params[:subscribe]
params[:options]
params[:options].merge params[:subscribe]
params[:options].fetch({}).merge params[:subscribe]
params.fetch(:options, {}).merge params[:subscribe]
params[:options]
params.fetch(:options, {}).merge params[:subscribe]
params[:options] ||= {}
params
params[:options]
params.fetch(:options, {}).merge params[:subscribe]
c
subscription_frequency_id
c
subscribe
c
subscribe
c
subscribe
c
subscription_frequency_id
c
Spree::Subscription.create subscription_attributes
n
c
Spree::Subscription.create(subscription_attributes).errors
Spree::Subscription.create subscription_attributes
subscription_attributes
n
subscription
n
c
insufficient_payment?
c
insufficient_payment?
c
@order
c
@order
c
@order
@order.payments.valid.sum(:amount).to_i
@order.payments.valid.sum(:amount)
@order.total.to_i
insufficient_payment?
c
insufficient_payment?
@order.total.to_i
c
@order.total.to_i
